{"version":3,"file":"static/js/707.3dd3a058.chunk.js","mappings":"6LAcA,UARoB,KAChB,SAAC,IAAD,CAAUA,MAAM,SAAhB,UACI,SAAC,IAAD,CAAMC,GAAI,CAAEC,SAAU,UAAtB,UACI,SAAC,IAAD,S,2JCCZ,MAAMC,EAAU,CACZ,CAAEC,GAAI,OAAQC,MAAO,OAAQC,SAAU,KACvC,CAAEF,GAAI,OAAQC,MAAO,cAAiBC,SAAU,KAChD,CACIF,GAAI,aACJC,MAAO,aACPC,SAAU,IACVC,MAAO,QACPC,OAASC,GAAUA,EAAMC,eAAe,UAE5C,CACIN,GAAI,OACJC,MAAO,mBACPC,SAAU,IACVC,MAAO,QACPC,OAASC,GAAUA,EAAMC,eAAe,UAE5C,CACIN,GAAI,UACJC,MAAO,UACPC,SAAU,IACVC,MAAO,QACPC,OAASC,GAAUA,EAAME,QAAQ,KAIzC,SAASC,EAAWC,EAAMC,EAAMC,EAAYC,GAExC,MAAO,CAAEH,OAAMC,OAAMC,aAAYC,OAAMC,QADvBF,EAAaC,GAIjC,MAAME,EAAO,CACTN,EAAW,QAAS,KAAM,WAAY,SACtCA,EAAW,QAAS,KAAM,WAAY,SACtCA,EAAW,QAAS,KAAM,SAAU,QACpCA,EAAW,gBAAiB,KAAM,UAAW,SAC7CA,EAAW,SAAU,KAAM,SAAU,SACrCA,EAAW,YAAa,KAAM,SAAU,SACxCA,EAAW,UAAW,KAAM,SAAU,QACtCA,EAAW,UAAW,KAAM,OAAS,OACrCA,EAAW,SAAU,KAAM,UAAW,SACtCA,EAAW,QAAS,KAAM,SAAW,QACrCA,EAAW,SAAU,KAAM,QAAU,QACrCA,EAAW,iBAAkB,KAAM,SAAU,QAC7CA,EAAW,SAAU,KAAM,UAAW,UACtCA,EAAW,UAAW,KAAM,UAAW,QACvCA,EAAW,SAAU,KAAM,UAAW,UAG3B,SAASO,IACpB,MAAOC,EAAMC,GAAWC,EAAAA,SAAe,IAChCC,EAAaC,GAAkBF,EAAAA,SAAe,IAWrD,OACI,UAAC,IAAD,CAAOrB,GAAI,CAAEwB,MAAO,OAAQvB,SAAU,UAAtC,WACI,SAAC,IAAD,CAAgBD,GAAI,CAAEyB,UAAW,KAAjC,UACI,UAAC,IAAD,CAAOC,cAAY,EAAC,aAAW,eAA/B,WACI,SAAC,IAAD,WACI,SAAC,IAAD,UACKxB,EAAQyB,KAAKC,IACV,SAAC,IAAD,CAA2BtB,MAAOsB,EAAOtB,MAAOuB,MAAO,CAAExB,SAAUuB,EAAOvB,UAA1E,SACKuB,EAAOxB,OADIwB,EAAOzB,WAMnC,SAAC,IAAD,UACKc,EAAKa,MAAMX,EAAOG,EAAaH,EAAOG,EAAcA,GAAaK,KAAKI,IAE/D,SAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,WAAWC,UAAW,EAA3C,SACKhC,EAAQyB,KAAKC,IACV,MAAMpB,EAAQuB,EAAIH,EAAOzB,IACzB,OACI,SAAC,IAAD,CAA2BG,MAAOsB,EAAOtB,MAAzC,SACKsB,EAAOrB,QAA2B,kBAAVC,EAAqBoB,EAAOrB,OAAOC,GAASA,GADzDoB,EAAOzB,QAJgB4B,EAAIlB,gBAe3E,SAAC,IAAD,CACIsB,mBAAoB,CAAC,GAAI,GAAI,KAC7BC,UAAU,MACVC,MAAOpB,EAAKqB,OACZhB,YAAaA,EACbH,KAAMA,EACNoB,aA9Ca,CAACC,EAAOC,KAC7BrB,EAAQqB,IA8CAC,oBA3CqBF,IAC7BjB,GAAgBiB,EAAMG,OAAOnC,OAC7BY,EAAQ","sources":["views/marketplace/NftOrders.js","views/marketplace/TxTable.js"],"sourcesContent":["import { Card } from '@mui/material';\n\nimport MainCard from 'ui-component/cards/MainCard';\n\nimport StickyHeadTable from './TxTable';\n\nconst TablerIcons = () => (\n    <MainCard title=\"Orders\">\n        <Card sx={{ overflow: 'hidden' }}>\n            <StickyHeadTable />\n        </Card>\n    </MainCard>\n);\n\nexport default TablerIcons;\n","import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\n\nconst columns = [\n    { id: 'name', label: 'Name', minWidth: 170 },\n    { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\n    {\n        id: 'population',\n        label: 'Population',\n        minWidth: 170,\n        align: 'right',\n        format: (value) => value.toLocaleString('en-US')\n    },\n    {\n        id: 'size',\n        label: 'Size\\u00a0(km\\u00b2)',\n        minWidth: 170,\n        align: 'right',\n        format: (value) => value.toLocaleString('en-US')\n    },\n    {\n        id: 'density',\n        label: 'Density',\n        minWidth: 170,\n        align: 'right',\n        format: (value) => value.toFixed(2)\n    }\n];\n\nfunction createData(name, code, population, size) {\n    const density = population / size;\n    return { name, code, population, size, density };\n}\n\nconst rows = [\n    createData('India', 'IN', 1324171354, 3287263),\n    createData('China', 'CN', 1403500365, 9596961),\n    createData('Italy', 'IT', 60483973, 301340),\n    createData('United States', 'US', 327167434, 9833520),\n    createData('Canada', 'CA', 37602103, 9984670),\n    createData('Australia', 'AU', 25475400, 7692024),\n    createData('Germany', 'DE', 83019200, 357578),\n    createData('Ireland', 'IE', 4857000, 70273),\n    createData('Mexico', 'MX', 126577691, 1972550),\n    createData('Japan', 'JP', 126317000, 377973),\n    createData('France', 'FR', 67022000, 640679),\n    createData('United Kingdom', 'GB', 67545757, 242495),\n    createData('Russia', 'RU', 146793744, 17098246),\n    createData('Nigeria', 'NG', 200962417, 923768),\n    createData('Brazil', 'BR', 210147125, 8515767)\n];\n\nexport default function StickyHeadTable() {\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    return (\n        <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n            <TableContainer sx={{ maxHeight: 440 }}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell key={column.id} align={column.align} style={{ minWidth: column.minWidth }}>\n                                    {column.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                            return (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                                    {columns.map((column) => {\n                                        const value = row[column.id];\n                                        return (\n                                            <TableCell key={column.id} align={column.align}>\n                                                {column.format && typeof value === 'number' ? column.format(value) : value}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 25, 100]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </Paper>\n    );\n}\n"],"names":["title","sx","overflow","columns","id","label","minWidth","align","format","value","toLocaleString","toFixed","createData","name","code","population","size","density","rows","StickyHeadTable","page","setPage","React","rowsPerPage","setRowsPerPage","width","maxHeight","stickyHeader","map","column","style","slice","row","hover","role","tabIndex","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target"],"sourceRoot":""}